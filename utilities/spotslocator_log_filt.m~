function [spots, spheres] = spotslocator_log_filt(img, imgmod, signal, dims, spotsize, resXY, resZ)
%
% Spots
% 1: X
% 2: Y
% 3: Z
% 4: Volume
% 5: Intensity
% 6: Nucleus ID
% 7: Position (distance to membrane)

    fprintf('3D spots localisation\n');
    im0 = double(imgmod).*double(signal>0);
	imori = double(img);
        
    %% Spot location
    candidates = [];
    for i_size = 1:length(spotsize);
        fprintf('\tLaplacian of Gaussian transform ...');
        %% Get spots
        % Top Hat transform
        [XX, YY, ZZ] = meshgrid(-spotsize(i_size):spotsize(i_size), ...
            -spotsize(i_size):spotsize(i_size), -spotsize(i_size):spotsize(i_size));
        
        se = XX.^2 + YY.^2 + ZZ.^2 <= (spotsize(i_size)/2)^2;
             
        im1 = (imori - min(imori(:)))./(max(imori(:))- min(imori(:)));
        im1 = imtophat(im1, se);
        
%         im2 = exp((im1 - min(im1(:)))./(max(im1(:))- min(im1(:))));
%         im2 = (im2 - min(im2(:)))./(max(im2(:))- min(im2(:)));
%         spotsint = FastFCMeans(im2uint8(im2), 3) >1; %grayslice(im2, 10) >0;
%         spotsint = bwareaopen(spotsint, 2);

        % 2D LoG transform
        fuzzyfilter = fspecial('gaussian', [9 9], spotsize(i_size));

        imgauss = imfilter(im1, fuzzyfilter);

        im = del2(imgauss);
        im(isnan(im)) = 0;
        
        % Get spots locations
        thresh = mean(im(:)) - 5*std(im(:));

        spotsim = im < thresh;
        spotsim = bwareaopen(spotsim, 100);

        fprintf('\tSpot candidates location found\n');

%         CC = bwconncomp(spotsimf, 26);
%         for i_cc = 1:CC.NumObjects
%             taille = length(CC.PixelIdxList{i_cc});
%             if taille > (spotsize(i_size)^3)
%                 spotsimf(CC.PixelIdxList{i_cc}) = 0;
%             end
%         end
        
        
        spotsCC = regionprops(spotsim, 'area', 'centroid');
        nbPosi = length(spotsCC);
        posi = zeros(nbPosi, 5);
        for i = 1:nbPosi
            if spotsCC(i).Area > 10000
                posi(i,:) = nan;
            end
            posi(i,1) = spotsCC(i).Centroid(2);
            posi(i,2) = spotsCC(i).Centroid(1);
            posi(i,3) = spotsCC(i).Centroid(3);
            posi(i,4) = spotsize(i_size);
            posi(i,5) = im1(round(posi(i,1)), round(posi(i,2)), round(posi(i,3)));
        end
        posi(isnan(posi)) = [];
        nbPosi = size(posi, 1);
        candidates = [candidates; posi]; %#ok<AGROW>
        fprintf('\t%d spots found at scale %d\n', nbPosi, spotsize(i_size));
    end
    if isempty(candidates)
        return
    end
    fprintf('\tFuse different scales\n');
    T = clusterdata(candidates(:,1:3), 'cutoff', max(spotsize)*2/3, 'criterion', 'distance');
    nbSpots = max(T);
    spotsloc = zeros(nbSpots, 3);
    radii = zeros(nbSpots, 1);
    intensity = zeros(nbSpots, 1);
    for i = 1:nbSpots
        spotsloc(i,:) = mean(candidates(T == i, 1:3), 1);
        radii(i) = median(candidates(T == i, 4))./sqrt(2);
        intensity(i) = mean(candidates(T == i, 5));
    end
    fprintf('\t%d spots extracted\n', nbSpots);
    
    %% Get spots intensity and labels
    fprintf('\tGenerate 3D spot mask\n');
    [~, order] = sort(intensity, 'ascend');
    spots = zeros(nbSpots, 7);
    spheres = zeros(dims);
    for ispot = 1:nbSpots
        spotid = order(ispot);
        
        % Create 3D neighborhood
        voi_R = round(spotsloc(spotid, 1)) + (-ceil(radii(spotid)) : ceil(radii(spotid)));
        voi_C = round(spotsloc(spotid, 2)) + (-ceil(radii(spotid)) : ceil(radii(spotid)));
        voi_Z = round(spotsloc(spotid, 3)) + (-ceil(radii(spotid)) : ceil(radii(spotid)));
        
        voi_R = voi_R(voi_R<=dims(1));
        voi_R = voi_R(voi_R>0);
        voi_C = voi_C(voi_C<=dims(2));
        voi_C = voi_C(voi_C>0);
        voi_Z = voi_Z(voi_Z<=dims(3));
        voi_Z = voi_Z(voi_Z>0);
        
        % Create local sphere
        [XX, YY, ZZ] = meshgrid(voi_C, voi_R, voi_Z);
        
        sphere = (XX - spotsloc(spotid,2)).^2 + ...
                 (YY - spotsloc(spotid,1)).^2 + ...
                 (ZZ - spotsloc(spotid,3)).^2 <= radii(spotid)^2;
             
        spheres(voi_R, voi_C, voi_Z) = max(cat(4,spheres(voi_R, voi_C, voi_Z), sphere.*ispot), [], 4);
    end
    spheres = spheres.*(signal>0);
    
%     fprintf('\tExtract spots information\n');
%     tokill = false(nbSpots, 1);
% 	reps=15;
%     fprintf(['\t[',repmat(' ',1,reps),']']) %make the "background"
%     did = 0;
%     for i_spot = 1:nbSpots
%         spotid = order(i_spot);
%         
%         sphereloc = spheres == i_spot;
%         
%         spots(i_spot, 1:3) = spotsloc(spotid, :);
%         spots(i_spot, 4) = sum(sphereloc(:));
%         spots(i_spot, 5) = sum(imori(sphereloc));
%         spots(i_spot, 6) = mode(double(nonzeros(signal(sphereloc))));
%         local = bwdist(~(signal == spotid));
%         spots(i_spot, 7) = local(round(spotsloc(spotid, 1)), ...
%                                  round(spotsloc(spotid, 2)), ...
%                                  round(spotsloc(spotid, 3)));
%          if isnan(spots(i_spot, 6))
%              tokill(i_spot) = true;
%          end
% 		 
% 		 if sum(i_spot == round(1:(nbSpots/reps):nbSpots)) == 1
%             fprintf(repmat('\b',1,reps+1-did)) %send the cursor back to the start
%             did = did +1;
%             fprintf('-');
%             fprintf(repmat(' ',1,reps-did));
%             fprintf(']');
%         end
%     end
%     
%     %% Remove detections outside nuclei and regenerate sphere image
%     if sum(tokill >0)
%         for i_spot = nbSpots:-1:1
%             if tokill(i_spot)
%                 spots(i_spot,:) = [];
%                 spheres(spheres == i_spot) = 0;
%                 for i_spotabove = i_spot+1:nbSpots
%                     spheres(spheres == i_spotabove) = i_spotabove -1;
%                 end
%             end
%         end
%     end
%     
    fprintf('\tSpots kept: %d\n', size(spots,1));

end
